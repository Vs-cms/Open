import os
import zipfile
from io import BytesIO
from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter


def create_excel_file(data, headers):
    """
    Creates an Excel file from a dictionary.
    :param data: List of dictionaries containing the data.
    :param headers: List of headers for the Excel columns.
    :return: BytesIO object containing the Excel file.
    """
    # Create a workbook and a worksheet
    workbook = openpyxl.Workbook()
    worksheet = workbook.active
    worksheet.title = "Data"

    # Add headers to the Excel file
    for col_num, header in enumerate(headers, start=1):
        worksheet.cell(row=1, column=col_num, value=header)

    # Add data to the Excel file
    for row_num, row_data in enumerate(data, start=2):
        for col_num, header in enumerate(headers, start=1):
            worksheet.cell(row=row_num, column=col_num, value=row_data.get(header, ""))

    # Save the workbook to a BytesIO object
    excel_buffer = BytesIO()
    workbook.save(excel_buffer)
    excel_buffer.seek(0)
    return excel_buffer


def create_zip():
    """Creates an in-memory zip file."""
    zip_buffer = BytesIO()
    zip_file = zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED)
    return zip_file, zip_buffer


def add_file_to_zip(zip_file, file_buffer, folder_name, file_name):
    """
    Adds a file to a folder in the zip file.
    :param zip_file: The zip file object.
    :param file_buffer: BytesIO object containing the file data.
    :param folder_name: Folder inside the zip to add the file.
    :param file_name: Name of the file to be added.
    """
    if folder_name and not folder_name.endswith("/"):
        folder_name += "/"
    archive_name = f"{folder_name}{file_name}"
    zip_file.writestr(archive_name, file_buffer.getvalue())


def get_zip_response(zip_buffer, zip_name="archive.zip"):
    """
    Returns the zip file as an HTTP response.
    :param zip_buffer: The BytesIO buffer containing the zip data.
    :param zip_name: The name of the zip file to be downloaded.
    """
    zip_buffer.seek(0)
    response = HttpResponse(zip_buffer, content_type="application/zip")
    response["Content-Disposition"] = f'attachment; filename="{zip_name}"'
    return response


# Usage Example
def download_zip_with_excel(request):
    # Sample data and headers
    data = [
        {"Name": "Alice", "Age": 30, "Department": "HR"},
        {"Name": "Bob", "Age": 25, "Department": "Finance"},
        {"Name": "Charlie", "Age": 35, "Department": "IT"},
    ]
    headers = ["Name", "Age", "Department"]

    # Step 1: Create an Excel file
    excel_buffer = create_excel_file(data, headers)

    # Step 2: Create a zip file
    zip_file, zip_buffer = create_zip()

    # Step 3: Add the Excel file to a folder in the zip
    add_file_to_zip(zip_file, excel_buffer, "reports", "employee_data.xlsx")

    # Step 4: Close the zip file
    zip_file.close()

    # Step 5: Return the zip file as an HTTP response
    return get_zip_response(zip_buffer, "data_with_excel.zip")
